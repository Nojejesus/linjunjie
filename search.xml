<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[多线程并发与线程安全]]></title>
    <url>%2FtechTube%2F2019%2F07%2F20%2F%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E4%B8%8E%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%2F</url>
    <content type="text"><![CDATA[死锁四个必要条件： 互斥条件 请求和保持条件 不剥夺条件 环路等待条件 例子： [详情] 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960/** * 一个简单的死锁类 * 当DeadLock类的对象flag==1时（td1），先锁定o1，睡眠500毫秒， * 而td1在睡眠的时候另一个flag==0的对象（td2）线程启动，先锁定o2，睡眠500毫秒， * td1睡眠结束后需要锁定o2才能继续执行，而此时o2已被td2锁定， * td2睡眠结束后需要锁定o1才能继续执行，而此时o1已被td1锁定， * td1、td2相互等待，都需要得到对方锁定的资源才能继续执行，从而死锁。 */@Slf4jpublic class DeadLock implements Runnable &#123; public int flag = 1; //静态对象是类的所有对象共享的 private static Object o1 = new Object(), o2 = new Object(); @Override public void run() &#123; log.info("flag: &#123;&#125;", flag); if (flag == 1) &#123; //锁o1 synchronized (o1) &#123; try &#123; Thread.sleep(500); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; //锁o2 synchronized (o2) &#123; log.info("1"); &#125; &#125; &#125; if (flag == 0) &#123; //锁o2 synchronized (o2) &#123; try &#123; Thread.sleep(500); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; //锁o1 synchronized (o1) &#123; log.info("0"); &#125; &#125; &#125; &#125; public static void main(String[] args) &#123; DeadLock td1 = new DeadLock(); DeadLock td2 = new DeadLock(); td1.flag = 1; td2.flag = 0; //td1，td2都处于可执行状态，但是JVM线程调度先先执行哪个线程是不确定的。 //td2的run()可能在td1的run()之前运行。 new Thread(td1).start(); new Thread(td2).start(); &#125;&#125;]]></content>
      <categories>
        <category>Java杂谈</category>
      </categories>
      <tags>
        <tag>并发</tag>
        <tag>多线程</tag>
        <tag>线程安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CountDownLatch]]></title>
    <url>%2FtechTube%2F2019%2F07%2F20%2FCountDownLatch%2F</url>
    <content type="text"><![CDATA[待添加]]></content>
      <categories>
        <category>Java杂谈</category>
      </categories>
      <tags>
        <tag>CountDownLatch</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Cloud]]></title>
    <url>%2FtechTube%2F2019%2F07%2F19%2FSpring-Cloud%2F</url>
    <content type="text"><![CDATA[待添加 待添加]]></content>
      <categories>
        <category>Spring框架</category>
      </categories>
      <tags>
        <tag>框架</tag>
        <tag>Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot]]></title>
    <url>%2FtechTube%2F2019%2F07%2F19%2FSpring-Boot%2F</url>
    <content type="text"><![CDATA[待添加]]></content>
      <categories>
        <category>Spring框架</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线程池]]></title>
    <url>%2FtechTube%2F2019%2F07%2F19%2F%E7%BA%BF%E7%A8%8B%E6%B1%A0%2F</url>
    <content type="text"><![CDATA[ThreadPoolExecutorgraph LR; RUNNING--"shutdown()"-->SHUTDOWN; RUNNING--"shutdownNow()"-->STOP; SHUTDOWN--"阻塞队列为空，线程池中的工作数量为0"-->TIDYING; STOP--线程池中的工作线程数量为0-->TIDYING; TIDYING--"terminated()"-->TERMINATED; 监控线程池 getTaskCount(): 线程池已执行和未执行的任务总数 getCompletedTaskCount(): 已完成的任务数量 getPoolSize(): 线程池当前的线程数量 getActiveCount(): 当前线程池中正在执行任务的线程总数 线程池的合理配置 cpu密集型任务，就需要尽量压榨CPU，参考值可以设置为NCPU+1IO密集型任务，参考值可以设置为2*NCPU 这只是参考值，并不代表随时随地拿线程池来用，要根据实际场景来分析选择以及参数的配置。例如，在开发企业级权限系统中，部门数的生成过程尝试使用线程池，结果是反而变慢，因为线程池里面的任务都很小（小到任务生成的时间和调度管理时间都很接近），这就造成资源浪费了。 关于用到newCachedThreadPool线程池可能会遇到的问题newCachedThreadPool的源码 12345public static ExecutorService newCachedThreadPool() &#123; return new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, new SynchronousQueue&lt;Runnable&gt;());&#125; 可以看到它允许的线程数为Integer.MAX_VALUE，这代表可以无限大，因为线程数可以这么多，所以会可能导致OOM问题，要解决这个问题，根本上要自己定义个方法，给线程数设置一个合理的上限，例如： 1return new ThreadPoolExecutor(0,1024，60L, TimeUnit.SECONDS, new SynchronousQueue&lt;Runnable&gt;());]]></content>
      <categories>
        <category>Java杂谈</category>
      </categories>
      <tags>
        <tag>线程池</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring]]></title>
    <url>%2FtechTube%2F2019%2F07%2F19%2FSpring%2F</url>
    <content type="text"><![CDATA[Spring源码分析blablabla]]></content>
      <categories>
        <category>Spring框架</category>
      </categories>
      <tags>
        <tag>框架</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[朝花夕拾]]></title>
    <url>%2FtechTube%2F2019%2F07%2F19%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
