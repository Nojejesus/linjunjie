<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Jenkins和Docker]]></title>
    <url>%2FtechTube%2F2019%2F07%2F31%2FJenkins%E5%92%8CDocker%2F</url>
    <content type="text"><![CDATA[推荐阅读：详解CI、CD相关概念Jenkins与Docker的自动化CI/CD实战Jenkins和Docker实现自动化构建部署]]></content>
      <tags>
        <tag>Jenkins</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[深入理解Java虚拟机-自动内存管理机制]]></title>
    <url>%2FtechTube%2F2019%2F07%2F27%2F%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E8%87%AA%E5%8A%A8%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6%2F</url>
    <content type="text"><![CDATA[自动内存管理机制Java虚拟机运行时数据区 由所有线程共享的数据区：方法区、堆 线程隔离的数据区：虚拟机栈、本地方法栈、程序计数器 程序计数器程序计数器是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。 Java虚拟机栈与程序计数器一样，Java虚拟机栈也是线程私有的。生命周期与线程相同。虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行时都会创建一个栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息。局部变量表存放了编译器可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（不等同对象本身，可能是个指向对象起始地址的引用指针）和returnAddress类型（指向一条字节码指令的地址）。 本地方法栈为虚拟机使用的Native方法服务。 Java堆对于大多数应用来说，Java堆（Java Heap）是虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，是虚拟机启动时创建。 此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存。 Java堆是垃圾收集器管理的主要区域，也被称为“GC堆”（Garbage Collected Heap）。根据Java虚拟机规范的规定，Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像我们的磁盘空间一样。 方法区和Java堆一样，是各个线程共享的内存区域，用于储存已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。 运行时常量池是方法区的一部分。 对象的创建待续未完]]></content>
      <categories>
        <category>深入理解Java虚拟机</category>
      </categories>
      <tags>
        <tag>Java虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[来自Github的巨星]]></title>
    <url>%2FtechTube%2F2019%2F07%2F27%2F%E6%9D%A5%E8%87%AAGithub%E7%9A%84%E5%B7%A8%E6%98%9F%2F</url>
    <content type="text"><![CDATA[Github项目]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[十大排序算法]]></title>
    <url>%2FtechTube%2F2019%2F07%2F27%2F%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[冒泡排序从序列的一端开始往另一端冒泡。 代码实现 展示代码 123456789101112131415//时间复杂度 o(n^2)public static void sort(int[] args) &#123; //冒泡轮数 for (int i = 0; i &lt; arr.length -1; i++) &#123; //依次两两比较 for (int j = 0; j &lt; arr.length - 1 - i; j++) &#123; int temp = 0; if (arr[j] &lt; arr[j + 1]) &#123; temp = arr[j]; arr[j] = arr[j +1]; arr[j + 1] = temp; &#125; &#125; &#125;&#125; 选择排序找到数组中最小（或最大）的元素，和数组中的第一个元素交换位置；在剩下的元素中找到最小（或最大）元素，和数组中的第二个元素交换位置，如此循环…直到整个数组排序完成。 代码实现 展示代码 123456789101112131415//时间复杂度 o(n^2)public static void sort(int arr[]) &#123; for (int i =0; i &lt; arr.length; i++) &#123; int min = i; //最小元素的下标 for (int j = i + 1; j &lt; arr.length; j++) &#123; if (arr[j] &lt; arr[min]) &#123; min = j; //找最小值 &#125; &#125; //交换位置 int temp = arr[i]; arr[i] = arr[min]; arr[min] = temp; &#125;&#125; 插入排序代码实现 展示代码 1234567891011121314151617//最好的时间复杂度是 o(n)，最坏的时间复杂度是 o(n^2)；//时间复杂度指标看的是最坏情况public static void sort(int[] arr) &#123; int n = arr.length; for (int i = 0; i &lt; n; i++) &#123; int value = arr[i]; int j = 0; //插入的位置 for (j = i - 1; j &gt;= 0; j--) &#123; if (arr[j] &gt; value) &#123; arr[j + 1] = arr[j]; //移动数据 &#125; else &#123; break; &#125; &#125; arr[j + 1] = value; //插入数据 &#125;&#125; 希尔排序待续未完 推荐阅读：这或许是东半球讲十大排序算法最好的一篇文章]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java动态代理]]></title>
    <url>%2FtechTube%2F2019%2F07%2F25%2FJava%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%2F</url>
    <content type="text"><![CDATA[推荐阅读：你真的完全了解Java动态代理吗？看这篇就够了Java动态代理机制详解（JDK 和CGLIB，Javassist，ASM）Java两种动态代理JDK动态代理和CGLIB动态代理Java动态代理 深度详解]]></content>
      <categories>
        <category>Java杂谈</category>
      </categories>
      <tags>
        <tag>动态代理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring之事务]]></title>
    <url>%2FtechTube%2F2019%2F07%2F24%2FSpring%E4%B9%8B%E4%BA%8B%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[推荐阅读：Spring事务管理（详解+实例）Spring配置事务五种方式Spring事务管理的四种方式（以银行转账为例）Spring事务传播行为详解spring事务管理]]></content>
      <categories>
        <category>Spring框架</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>事务</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[注解@Autowired和@Resource]]></title>
    <url>%2FtechTube%2F2019%2F07%2F24%2F%E6%B3%A8%E8%A7%A3-Autowire%E5%92%8C-Resource%2F</url>
    <content type="text"><![CDATA[场景当一个接口有多个实现类时，Spring的Bean注入要指定继承类，主要有以下两种方式： @Resource是JDK提供的注解，默认按照by-name方式寻找bean，一般一个name对应一个bean，当找不到与名称匹配的bean才会按照类型装配（by-type）。当注解写在字段上，默认取字段名进行查找，如果name属性一旦指定，就只会按照名称来装配。@Autowired是Spring提供的注解，默认情况下必须要求依赖对象必须存在，如果要允许null值，可以设置他的required属性为false。如果我们想使用名称装配可以结合@Quality注解指定Bean的名称使用。 接口123public interface UserService &#123; User findById(int id);&#125; 实现类123456789101112131415161718192021@Service("userService1")@transactional("firstTransactionManager")public class UserServiceImpl implements UserService &#123; @Autowired private UserRepository userRepository; @Override public User findById(int id) &#123; return this.userRepository.findOne(id); &#125; &#125;@Service("userService2")@Transactional("secondTransactionManager")public class UserSecondServiceImpl implements UserService &#123; @Autowired private UserSecondRepository userRepository; @Override public User findById(int id) &#123; return this.userRepository.findOne(id); &#125;&#125; 注入方式123456@Autowired@Qualifier("userService3")private UserService userService;---or@Resource(name = "userService3")private UserService userService; 另外，@Autowired属于Spring，@Resource属于J2EE，@Resource可以减少与Spring的耦合，代码更优雅。 推荐阅读:Spring中注解@Autowired与@Resource的依赖注入源码分析https://blog.csdn.net/bawcwchen/article/details/79793288 Spring annotation中,@resource如何找到实现类的https://blog.csdn.net/zc_ad/article/details/78124269 在普通Java类里使用spring里注入的service、dao等https://blog.csdn.net/tianyaleixiaowu/article/details/54630383 Spring IOC容器的自动装配源码级解析]]></content>
      <categories>
        <category>Spring框架</category>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Spring全局异常拦截及公共响应对象的实现]]></title>
    <url>%2FtechTube%2F2019%2F07%2F22%2FSpring%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E6%8B%A6%E6%88%AA%E5%8F%8A%E5%85%AC%E5%85%B1%E5%93%8D%E5%BA%94%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[SpringMVC的三种全局异常拦截处理方式 使用SpringMVC提供的简单异常处理器SimpleMappingExceptionResolver 实现Spring的异常处理接口HandleExceptionResolver 使用@ExceptionHandler注解 公共响应对象的封装 JsonData类封装了一个通用的返回结构，并不具备拦截器功能。 [展示代码] 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455package com.jjstore.common;import lombok.Getter;import lombok.Setter;import java.util.HashMap;import java.util.Map;/** * 定义接口json数据返回的结构 */@Getter@Setterpublic class JsonData &#123; private boolean ret; //返回结果 private String msg; //提示信息 private Object data; //返回的数据 public JsonData(boolean ret) &#123; this.ret = ret; &#125; public static JsonData success(Object object, String msg) &#123; JsonData jsonData = new JsonData(true); jsonData.msg = msg; jsonData.data = object; return jsonData; &#125; public static JsonData success(Object object) &#123; JsonData jsonData = new JsonData(true); jsonData.data = object; return jsonData; &#125; public static JsonData success() &#123; return new JsonData(true); &#125; public static JsonData fail(String msg) &#123; JsonData jsonData = new JsonData(false); jsonData.msg = msg; return jsonData; &#125; public Map&lt;String, Object&gt; toMap() &#123; HashMap&lt;String, Object&gt; result = new HashMap&lt;&gt;(); result.put("ret", ret); result.put("msg", msg); result.put("data", data); return result; &#125;&#125; 全局异常拦截器的实现 为什么要做全局异常拦截？如果我们不拦截，后端的异常直接抛到前端，例如像tomcat那个看起来特别丑的界面或者显示异常对象的样板代码，体验是很不友好的。实际开发中是不允许的出现这种情况的。全局异常拦截器的实现是我们期望在任何情况下都能按照一个统一结构返回给前端控制器，这是一种优雅的设计方式。拦截器实现代码（其中PermissionException和ParamException是自定义的异常类）： [展示代码] 123456789101112131415161718192021222324252627282930313233343536373839404142package com.jjstore.common;import com.jjstore.exception.ParamException;import com.jjstore.exception.PermissionException;import lombok.extern.slf4j.Slf4j;import org.springframework.web.servlet.HandlerExceptionResolver;import org.springframework.web.servlet.ModelAndView;@Slf4jpublic class SpringExceptionResolver implements HandlerExceptionResolver &#123; @Override public ModelAndView resolveException(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, Object handler, Exception ex) &#123; //获取当前访问的url String url = request.getRequestURL().toString(); ModelAndView mv; String defaultMsg = "System error"; //对数据请求和页面请求分别做异常处理 //那么我们如何判断当前的请求是数据请求还是页面请求呢？--方案一：从request里取得header，来判断请求类型，实现较复杂； //方案二：通过自定义接口规范，如所有接口json数据请求使用.json结尾，所有页面请求使用.page结尾。则通过此后缀来判断。 //所以本项目要求所有请求json数据，都使用.json结尾；请求page页面，都是用.page结尾。 if (url.endsWith(".json")) &#123; if (ex instanceof PermissionException || ex instanceof ParamException) &#123; JsonData result = JsonData.fail(ex.getMessage()); mv = new ModelAndView("jsonView", result.toMap()); &#125; else &#123; //log日志记录请求的url，打印ex堆栈 log.error("unknow json exception, url:" + url, ex); JsonData result = JsonData.fail(defaultMsg); mv = new ModelAndView("jsonView", result.toMap()); &#125; &#125; else if (url.endsWith(".page")) &#123; log.error("unknow page exception, url:" + url, ex); JsonData result = JsonData.fail(defaultMsg); mv = new ModelAndView("exception", result.toMap()); &#125; else &#123; log.error("unknow exception, url:" + url, ex); JsonData result = JsonData.fail(defaultMsg); mv = new ModelAndView("jsonView", result.toMap()); &#125; return mv; &#125;&#125; 在spring-servlet.xml中添加这个bean [展示代码] 12&lt;!-- 全局异常处理类 --&gt;&lt;bean class="com.jjstore.common.SpringExceptionResolver" /&gt;]]></content>
      <categories>
        <category>projects</category>
        <category>permission</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[IDEA的使用习惯和小技巧]]></title>
    <url>%2FtechTube%2F2019%2F07%2F21%2FIDEA%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%A0%E6%83%AF%E5%92%8C%E5%B0%8F%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[常用快捷键（win）Ctrl + N : 按类名查找Ctrl + D : 复制当前行Ctrl + Y : 删除当前行Ctrl + Shift + N : 按文件名查找Ctrl + Shift + ↑ : 当前行向上移Ctrl + Shift + ↓ : 当前行向下移 Ctrl + F12 : 当前类文件结构（域，方法）Alt + Insert : Generate代码生成器Ctrl + Alt + T : Surround With]]></content>
      <categories>
        <category>日常工具</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[企业级权限管理系统-部门模块]]></title>
    <url>%2FtechTube%2F2019%2F07%2F21%2F%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F-%E9%83%A8%E9%97%A8%E6%A8%A1%E5%9D%97%2F</url>
    <content type="text"><![CDATA[新增部门接口开发 IDEA分屏模式在IDEA标签页右键可选择”Split Vertically”或”Split Horizontally”进行横向分屏或垂向分屏模式。 param包（vo层）下创建DeptParam类（部门的vo类），添加lombok注解@ToString。controller包下创建SysDeptController类；service包下创建SysDeptService类；util包下创建LevelUtil工具类（计算部门的层级）。 分层结构本次并没采用上次商城demo的controller + (service interface + service implement) + dao结构，而是基本的controller + service + dao；首先后者这个基本分层是应该要有的，对于service interface + service implement这样设计本身没有严格要求，但细分出接口+接口实现有一些特殊好处，比如service要做成RPC服务，直接将service的interface暴露出去就可以了。 代码 model包为pojo层，SysDept类（部门pojo类）添加lombok注解@Builder，使得Sysdept类通过builder()方法创建实例对象。service层实现新增部门业务逻辑： [展示代码] 12345678910111213/** * @Sysdept 部门pojo类 * @deptParam controller层传入部门对象 * @dept service层vo对象*/SysDept dept = SysDept.builder() .name(deptParam.getName()) .parentId(deptParam.getParentId()) .seq(deptParam.getSeq()) .remark(deptParam.getRemark()) .build();//dept层级dept.setLevel(LevelUtil.calculateLevel(getLevel(deptParam.getParentId()), deptParam.getParentId())); 计算部门层级的工具类 [展示代码] 123456789101112131415161718192021public class LevelUtil &#123; private static final String SEPARATOR = "."; private static final String ROOT = "0"; //例如 //0 //0.1 //0.1.2 //0.1.3 //0.4 //根据parentId查询parentLevel, 然后拼接parentId得到当前部门所在层级 public static String calculateLevel(String parentLevel, int parentId) &#123; if (StringUtils.isBlank(parentLevel)) &#123; return ROOT; &#125; else &#123; return StringUtils.join(parentLevel, SEPARATOR, parentId); &#125; &#125;&#125; 有选择地更新部门字段，新增部门 [展示代码] 12//只对有值的字段插入，没有值的字段不做处理，也不触发NotNull因素sysDeptMapper.insertSelective(dept); controller层直接调用service层业务逻辑并返回响应结果 [展示代码] 123456@RequestMapping("save.json")@ResponseBodypublic JsonData saveDept(DeptParam deptParam) &#123; sysDeptService.save(deptParam); return JsonData.success();&#125; 部门层级树接口开发com.google.common.collect.MultimapGoogle Guava（Java库）中的表示键值对映射关系的集合，与Map类似，但是Multimap中的键值对可以是一对一关系，也可以一对多关系。创建一个表示层级和该层级所含部门对象的映射集合: 123//层级和属于该层级的部门的映射关系//level -&gt; [dept1, dept2, dept3, ...]Multimap&lt;String, DeptLevelDto&gt; levelDeptMap = ArrayListMultimap.create(); java.util.Collections.sort()方法源码: 123public static &lt;T&gt; void sort(List&lt;T&gt; list, Comparator&lt;? super T&gt; c) &#123; list.sort(c);&#125; java.util.Comparator能对对象集合进行总排序的接口（比较器）。可以将比较器传递给一个排序方法，如: 123Collections.sort(List, Comparator)或者Arrays.sort(Object[], Comparator) 实现明确的排序次序。对于任意元素e1、e2，当且仅当e1.equals(e2)==0，才认为布尔值相同，那么c.compare(e1, e2)==0；rootList是DeptLevelDto类对象的集合，通过比较DeptLevelDto类对象的seq域对rootList的元素进行排序： 1234567//排序规则，从小到大Collections.sort(rootList, new Comparator&lt;DeptLevelDto&gt;() &#123; @Override public int compare(DeptLevelDto o1, DeptLevelDto o2) &#123; return o1.getSeq() - o2.getSeq(); &#125;&#125;); Comparator接口具有方法: 1int compare(T o1, T o2); 返回一个负数，0或正数，分别表示第一个参数小于，等于或大于第二个参数。 递归生成部门树的方法1234567891011121314151617181920212223//递归生成树方法(层级a下所有部门|所有子部门集合，层级a，已按层级-部门做归类映射的所有部门|所有子部门集合)//level:0, 0, all 0 -&gt; 0.1, 0.2//level:0.1//level:0.2public void transformDeptTree(List&lt;DeptLevelDto&gt; deptLevelDtoList, String level, Multimap&lt;String, DeptLevelDto&gt; levelDeptMap) &#123; //遍历每个部门 for (int i = 0; i &lt; deptLevelDtoList.size(); i++) &#123; DeptLevelDto deptLevelDto = deptLevelDtoList.get(i); //处理当前部门的数据 //子部门的层级 String nextLevel = LevelUtil.calculateLevel(level, deptLevelDto.getId()); //获取子部门 List&lt;DeptLevelDto&gt; tempDeptList = (List&lt;DeptLevelDto&gt;) levelDeptMap.get(nextLevel); if (CollectionUtils.isNotEmpty(tempDeptList)) &#123; //排序 Collections.sort(tempDeptList, deptSeqComparator); //设置下一层部门，即将排好序的子部门挂在当前部门下 deptLevelDto.setDeptLevelDtoList(tempDeptList); //进入子部门的下一层处理 transformDeptTree(tempDeptList, nextLevel, levelDeptMap); &#125; &#125;&#125; 更新部门接口开发代码 [展示代码] 1234567891011121314151617181920212223242526272829303132333435363738//更新部门时，目标部门进行了更新则子孙部门也会随之更新，要么都更新成功，要么都失败，所以添加事务注解@Transactionalpublic void updateWithChild(SysDept before, SysDept after) &#123; String newLevelPrefix = after.getLevel(); String oldLevelPrefix = before.getLevel(); if (!newLevelPrefix.equals(oldLevelPrefix)) &#123; //子部门原来层级 String curLevel = before.getLevel() + "." + before.getId(); //查询原来的子孙部门 //注意的点：getChildDeptListByLevel()方法可能取出多余的内容吗？ //比如：0.1*查询时可能取出0.1, 0.1.3, 0.11.3，但我们实际并不需要0.11.3这种结果 //在数据库尝试模糊查询"0.1.%"与"0.1%"，看看是否有区别 List&lt;SysDept&gt; deptList = sysDeptMapper.getChildDeptListByLevel(curLevel + "%"); //子孙部门不为空时，做逻辑处理 if (CollectionUtils.isNotEmpty(deptList)) &#123; //遍历子孙部门 for (SysDept dept : deptList) &#123; //子孙部门原来的层级 String level = dept.getLevel(); //逻辑：由于在数据库表设计中，每个部门的level字段其实是上级id的集合，形式例如"0.2.1.3" //所以，当某个部门在前端页面被改变了层级，就是部门的parentId发生改变， //而对于这个部门的所有子部门的level字段的值，变化的就是前段。 if (level.equals(curLevel) || level.indexOf(curLevel + ".") == 0) &#123; //子部门的层级level的值变化: = 被更新部门更新后的层级 + 截取原来层级的后段 //待定： //level = newLevelPrefix + "." + dept.getId() + "." + level.substring(oldLevelPrefix.length()); level = newLevelPrefix + level.substring(oldLevelPrefix.length()); dept.setLevel(level); &#125; &#125; //批量(子孙部门)更新 sysDeptMapper.batchUpdateLevel(deptList); &#125; &#125; //更新目标部门 sysDeptMapper.updateByPrimaryKey(after);&#125; 注意的点 如果一个类不覆写toString()方法，直接打印这个类时调用的是Object里的toString()，实现苦涩难懂，输出与hashCode有关，实际中我们期望打印的是该类的实例的相关变量值，在类上添加lombok注解@ToString相当于覆写了toString()方法，输出内容是基于变量组成的字符串，容易读懂。 部门表的level这个字段其实就是父级id的集合。这样设计的思考是：如果查询某部门下所有的子部门，就不需要进行递归查询，只需要使用（当前部门层级+当前部门id）作为前缀查询就可。 dto，数据传输对象。本项目中的作用vo-&gt;dto-&gt;pojo-&gt;entity，作用于展示层和服务层的数据传输。 尽管DeptParam与SysDept比较像，但从设计上它们属于两个层面的内容，DeptParam说白了就是封装前端的参数，后面如果处理它是不关心的。这样带来的好处是，数据库有什么调整前端不需要感知。尽管有时候使用SysDept对象去接收前端参数也能完成一些接口的开发，但是这样会造成扩展性很差，同时也相当于把数据库设计暴露给前端了。另外对于数据对象如果引用了其他对象的情况，参数如何传递也是一个大问题，这种情况如果在做一些升级，比如1对1关系，变成1对多关系，前端就直接无法做兼容调整了，后端做字段调整时可能直接带来前端访问错误。但理论上任何一个表的字段都可能调整多次，这就属于无形间增加了数据库调整时的复杂度。只有各个层之间做到真正分离，任何一层需要修改时只需修改层与层之间的适配即可，正常的项目就应该这样去设计。]]></content>
      <categories>
        <category>projects</category>
        <category>permission</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[数据库和缓存一致性问题]]></title>
    <url>%2FtechTube%2F2019%2F07%2F20%2F%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[DB和缓存同时操作的一致性问题缓存中的数据和数据源并非总是一致的，应用程序必须实现一种帮助确保缓存和数据源一致的策略。这种策略不仅能够确保缓存里的数据是最新的，而且当缓存中的数据不是最新的时候，需要能被监测到并采取响应措施。（待续：https://coding.imooc.com/learn/questiondetail/105625.html）]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[多线程并发与线程安全]]></title>
    <url>%2FtechTube%2F2019%2F07%2F20%2F%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E4%B8%8E%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%2F</url>
    <content type="text"><![CDATA[死锁四个必要条件： 互斥条件 请求和保持条件 不剥夺条件 环路等待条件 例子： [展示代码] 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960/** * 一个简单的死锁类 * 当DeadLock类的对象flag==1时（td1），先锁定o1，睡眠500毫秒， * 而td1在睡眠的时候另一个flag==0的对象（td2）线程启动，先锁定o2，睡眠500毫秒， * td1睡眠结束后需要锁定o2才能继续执行，而此时o2已被td2锁定， * td2睡眠结束后需要锁定o1才能继续执行，而此时o1已被td1锁定， * td1、td2相互等待，都需要得到对方锁定的资源才能继续执行，从而死锁。 */@Slf4jpublic class DeadLock implements Runnable &#123; public int flag = 1; //静态对象是类的所有对象共享的 private static Object o1 = new Object(), o2 = new Object(); @Override public void run() &#123; log.info("flag: &#123;&#125;", flag); if (flag == 1) &#123; //锁o1 synchronized (o1) &#123; try &#123; Thread.sleep(500); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; //锁o2 synchronized (o2) &#123; log.info("1"); &#125; &#125; &#125; if (flag == 0) &#123; //锁o2 synchronized (o2) &#123; try &#123; Thread.sleep(500); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; //锁o1 synchronized (o1) &#123; log.info("0"); &#125; &#125; &#125; &#125; public static void main(String[] args) &#123; DeadLock td1 = new DeadLock(); DeadLock td2 = new DeadLock(); td1.flag = 1; td2.flag = 0; //td1，td2都处于可执行状态，但是JVM线程调度先先执行哪个线程是不确定的。 //td2的run()可能在td1的run()之前运行。 new Thread(td1).start(); new Thread(td2).start(); &#125;&#125; 避免死锁方法1.加锁顺序，线程要按一定顺序加锁。2.加锁时限，加锁时要限时，超过时限就要放弃对该锁的请求并释放自己占有的锁。如ReentranLock。3.死锁检测，这是个说起来容易做起来难的办法。一般也没人选择这样实现。在实际项目中，如果发生了死锁，往往就要重启项目，这个代价还是非常大的。 Spring与线程安全 Spring Bean: singleton(单例)、prototypeSpring对每个Bean提供了scope属性来表示该Bean之作用域，它是这个Bean的生命周期，singleton对象表示单例对象，在第一次注入时就会被复用到应用结束；prototype类型则在每次注入时都会创建新的对象。 无状态对象由Spring管理的对象其实大多数是无状态对象（不会因为多线程进行线程调度而导致状态被破坏）。包括常用到的dto、vo这些只作为数据实体模型的对象，还有service、dao、controller等等对象。例如每个dao提供的函数，对只是对数据库的crud操作，并且每个数据库的connection都是作为函数的局部变量，用完即关，或者交还连接池。局部变量是在用户栈中，是线程私有的内存区域，所以也不存在线程安全问题。 所以很清楚，Spring对Bean的多线程安全问题并没有做出任何保证或措施，对于每个Bean不存在线程安全问题，根本原因是这些Bean的设计并没有在Bean中声明任何有状态的实例变量或类变量。如果要做有状态设计，那么可以使用ThreadLocal把变量变成线程私有，而如果Bean的实例变量或者类变量需要在多个线程间共享，那就只能使用synchronized、lock、CAS等实现线程同步了。 HashMap与ConcurrentHashMap前者是非线程安全的，后者是线程安全的。前者允许key，value为空，后者则不允许。前者不允许在通过Iterator遍历同时对HashMap修改（例如使用iterator的remove()），而后者是允许的，并且更新后续可见。ConcurrentHashMap是也通过key的哈希值与数组的长度的取模来确定该key在数组中的索引（是不是有点绕），与以往版本不同的是，在Java8里ConcurrentHashMap的实现做了较大调整，取消了segment分段锁而采用CAS和synchronized来保证并发安全，数据结构采用数组+链表/红黑二叉树的方式实现（当链表中的节点个数超过8个时，转换成红黑树的数据结构来存储。synchronized只锁定当前链表或红黑二叉树的首节点），提高了并发性，寻址效率高。(补充一下，1.8HashMap也不再仅仅是数组+链表形式，也有树了) 概念：fast-fail机制即快速失败机制，是java集合（Collection）中的一种错误检测机制。在迭代集合的过程中该集合在结构上发生改变时，就可能发生fast-fail，即抛出ConcurrentModificationException异常。fast-fail机制并不保证在异步修改一定会抛出异常，它只是“尽最大努力”去抛出，所以这种机制一般仅用于检测bug。推荐阅读：http://www.nowamagic.net/librarys/veda/detail/1202 HashMap的存取之美]]></content>
      <categories>
        <category>Java杂谈</category>
      </categories>
      <tags>
        <tag>并发</tag>
        <tag>多线程</tag>
        <tag>线程安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CountDownLatch]]></title>
    <url>%2FtechTube%2F2019%2F07%2F20%2FCountDownLatch%2F</url>
    <content type="text"><![CDATA[待添加]]></content>
      <categories>
        <category>Java杂谈</category>
      </categories>
      <tags>
        <tag>CountDownLatch</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Cloud]]></title>
    <url>%2FtechTube%2F2019%2F07%2F19%2FSpring-Cloud%2F</url>
    <content type="text"><![CDATA[Just do IT Do more IT]]></content>
      <categories>
        <category>Spring框架</category>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>框架</tag>
        <tag>Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot]]></title>
    <url>%2FtechTube%2F2019%2F07%2F19%2FSpring-Boot%2F</url>
    <content type="text"><![CDATA[Spring Boot]]></content>
      <categories>
        <category>Spring框架</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线程池]]></title>
    <url>%2FtechTube%2F2019%2F07%2F19%2F%E7%BA%BF%E7%A8%8B%E6%B1%A0%2F</url>
    <content type="text"><![CDATA[ThreadPoolExecutorgraph LR; RUNNING--"shutdown()"-->SHUTDOWN; RUNNING--"shutdownNow()"-->STOP; SHUTDOWN--"阻塞队列为空，线程池中的工作数量为0"-->TIDYING; STOP--线程池中的工作线程数量为0-->TIDYING; TIDYING--"terminated()"-->TERMINATED; 监控线程池 getTaskCount(): 线程池已执行和未执行的任务总数 getCompletedTaskCount(): 已完成的任务数量 getPoolSize(): 线程池当前的线程数量 getActiveCount(): 当前线程池中正在执行任务的线程总数 线程池的合理配置 cpu密集型任务，就需要尽量压榨CPU，参考值可以设置为NCPU+1IO密集型任务，参考值可以设置为2*NCPU 这只是参考值，并不代表随时随地拿线程池来用，要根据实际场景来分析选择以及参数的配置。例如，在开发企业级权限系统中，部门数的生成过程尝试使用线程池，结果是反而变慢，因为线程池里面的任务都很小（小到任务生成的时间和调度管理时间都很接近），这就造成资源浪费了。 关于用到newCachedThreadPool线程池可能会遇到的问题newCachedThreadPool的源码 12345public static ExecutorService newCachedThreadPool() &#123; return new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, new SynchronousQueue&lt;Runnable&gt;());&#125; 可以看到它允许的线程数为Integer.MAX_VALUE，这代表可以无限大，因为线程数可以这么多，所以会可能导致OOM问题，要解决这个问题，根本上要自己定义个方法，给线程数设置一个合理的上限，例如： 1return new ThreadPoolExecutor(0,1024，60L, TimeUnit.SECONDS, new SynchronousQueue&lt;Runnable&gt;());]]></content>
      <categories>
        <category>Java杂谈</category>
      </categories>
      <tags>
        <tag>线程池</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring]]></title>
    <url>%2FtechTube%2F2019%2F07%2F19%2FSpring%2F</url>
    <content type="text"><![CDATA[Spring推荐阅读：Spring源码整体架构spring注解@Component、@Service等自动生成bean的命名规则Spring注解@Component、@Repository、@Service、@Controller区别 Spring单例模式与线程安全 ☆☆☆☆☆]]></content>
      <categories>
        <category>Spring框架</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[朝花夕拾]]></title>
    <url>%2FtechTube%2F2019%2F07%2F19%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
