<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[IDEA的使用习惯和小技巧]]></title>
    <url>%2FtechTube%2F2019%2F07%2F21%2FIDEA%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%A0%E6%83%AF%E5%92%8C%E5%B0%8F%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[常用快捷键（win）Ctrl + N : 按类名查找Ctrl + D : 复制当前行Ctrl + Y : 删除当前行Ctrl + Shift + N : 按文件名查找Ctrl + Shift + ↑ : 当前行向上移Ctrl + Shift + ↓ : 当前行向下移 Ctrl + F12 : 当前类文件结构（域，方法）Alt + F12 : Generate代码生成器Ctrl + Alt + T : Surround With]]></content>
      <categories>
        <category>日常工具</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[企业级权限管理系统-部门模块]]></title>
    <url>%2FtechTube%2F2019%2F07%2F21%2F%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F-%E9%83%A8%E9%97%A8%E6%A8%A1%E5%9D%97%2F</url>
    <content type="text"><![CDATA[新增部门接口开发 IDEA分屏模式在IDEA标签页右键可选择”Split Vertically”或”Split Horizontally”进行横向分屏或垂向分屏模式。 param包（vo层）下创建DeptParam类，表示部门的vo类，并且DeptParam类添加lombok的注解@ToString。controller包下创建SysDeptController类；service包下SysDeptService类；util包下创建LevelUtil工具类（计算部门的层级）。 分层结构本次并没采用上次商城demo的controller + (service interface + service implement) + dao结构，而是基本的controller + service + dao；首先后者这个基本分层是应该要有的，对于service interface + service implement这样设计本身没有严格要求，但细分出接口+接口实现有一些特殊好处，比如service要做成RPC服务，直接将service的interface暴露出去就可以了。 注意的点 如果一个类不覆写toString()方法，直接打印这个类时调用的是Object里的toString()，实现苦涩难懂，输出与hashCode有关，实际中我们期望打印的是该类的实例的相关变量值，在类上添加lombok注解@ToString相当于覆写了toString()方法，输出内容是基于变量组成的字符串，容易读懂。 待续 2.1 Continue 2.2 Text]]></content>
      <categories>
        <category>projects</category>
        <category>permission</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[数据库和缓存一致性问题]]></title>
    <url>%2FtechTube%2F2019%2F07%2F20%2F%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[DB和缓存同时操作的一致性问题缓存中的数据和数据源并非总是一致的，应用程序必须实现一种帮助确保缓存和数据源一致的策略。这种策略不仅能够确保缓存里的数据是最新的，而且当缓存中的数据不是最新的时候，需要能被监测到并采取响应措施。（待续：https://coding.imooc.com/learn/questiondetail/105625.html）]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[多线程并发与线程安全]]></title>
    <url>%2FtechTube%2F2019%2F07%2F20%2F%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E4%B8%8E%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%2F</url>
    <content type="text"><![CDATA[死锁四个必要条件： 互斥条件 请求和保持条件 不剥夺条件 环路等待条件 例子： [展示代码] 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960/** * 一个简单的死锁类 * 当DeadLock类的对象flag==1时（td1），先锁定o1，睡眠500毫秒， * 而td1在睡眠的时候另一个flag==0的对象（td2）线程启动，先锁定o2，睡眠500毫秒， * td1睡眠结束后需要锁定o2才能继续执行，而此时o2已被td2锁定， * td2睡眠结束后需要锁定o1才能继续执行，而此时o1已被td1锁定， * td1、td2相互等待，都需要得到对方锁定的资源才能继续执行，从而死锁。 */@Slf4jpublic class DeadLock implements Runnable &#123; public int flag = 1; //静态对象是类的所有对象共享的 private static Object o1 = new Object(), o2 = new Object(); @Override public void run() &#123; log.info("flag: &#123;&#125;", flag); if (flag == 1) &#123; //锁o1 synchronized (o1) &#123; try &#123; Thread.sleep(500); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; //锁o2 synchronized (o2) &#123; log.info("1"); &#125; &#125; &#125; if (flag == 0) &#123; //锁o2 synchronized (o2) &#123; try &#123; Thread.sleep(500); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; //锁o1 synchronized (o1) &#123; log.info("0"); &#125; &#125; &#125; &#125; public static void main(String[] args) &#123; DeadLock td1 = new DeadLock(); DeadLock td2 = new DeadLock(); td1.flag = 1; td2.flag = 0; //td1，td2都处于可执行状态，但是JVM线程调度先先执行哪个线程是不确定的。 //td2的run()可能在td1的run()之前运行。 new Thread(td1).start(); new Thread(td2).start(); &#125;&#125; 避免死锁方法1.加锁顺序，线程要按一定顺序加锁。2.加锁时限，加锁时要限时，超过时限就要放弃对该锁的请求并释放自己占有的锁。如ReentranLock。3.死锁检测，这是个说起来容易做起来难的办法。一般也没人选择这样实现。在实际项目中，如果发生了死锁，往往就要重启项目，这个代价还是非常大的。 Spring与线程安全 Spring Bean: singleton(单例)、prototypeSpring对每个Bean提供了scope属性来表示该Bean之作用域，它是这个Bean的生命周期，singleton对象表示单例对象，在第一次注入时就会被复用到应用结束；prototype类型则在每次注入时都会创建新的对象。 无状态对象由Spring管理的对象其实大多数是无状态对象（不会因为多线程进行线程调度而导致状态被破坏）。包括常用到的dto、vo这些只作为数据实体模型的对象，还有service、dao、controller等等对象。例如每个dao提供的函数，对只是对数据库的crud操作，并且每个数据库的connection都是作为函数的局部变量，用完即关，或者交还连接池。局部变量是在用户栈中，是线程私有的内存区域，所以也不存在线程安全问题。 所以很清楚，Spring对Bean的多线程安全问题并没有做出任何保证或措施，对于每个Bean不存在线程安全问题，根本原因是这些Bean的设计并没有在Bean中声明任何有状态的实例变量或类变量。如果要做有状态设计，那么可以使用ThreadLocal把变量变成线程私有，而如果Bean的实例变量或者类变量需要在多个线程间共享，那就只能使用synchronized、lock、CAS等实现线程同步了。 HashMap与ConcurrentHashMap前者是非线程安全的，后者是线程安全的。前者允许key，value为空，后者则不允许。前者不允许在通过Iterator遍历同时对HashMap修改（例如使用iterator的remove()），而后者是允许的，并且更新后续可见。ConcurrentHashMap是也通过key的哈希值与数组的长度的取模来确定该key在数组中的索引（是不是有点绕），与以往版本不同的是，在Java8里ConcurrentHashMap的实现做了较大调整，取消了segment分段锁而采用CAS和synchronized来保证并发安全，数据结构采用数组+链表/红黑二叉树的方式实现（当链表中的节点个数超过8个时，转换成红黑树的数据结构来存储。synchronized只锁定当前链表或红黑二叉树的首节点），提高了并发性，寻址效率高。(补充一下，1.8HashMap也不再仅仅是数组+链表形式，也有树了) 概念：fast-fail机制即快速失败机制，是java集合（Collection）中的一种错误检测机制。在迭代集合的过程中该集合在结构上发生改变时，就可能发生fast-fail，即抛出ConcurrentModificationException异常。fast-fail机制并不保证在异步修改一定会抛出异常，它只是“尽最大努力”去抛出，所以这种机制一般仅用于检测bug。推荐阅读：http://www.nowamagic.net/librarys/veda/detail/1202 HashMap的存取之美]]></content>
      <categories>
        <category>Java杂谈</category>
      </categories>
      <tags>
        <tag>并发</tag>
        <tag>多线程</tag>
        <tag>线程安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CountDownLatch]]></title>
    <url>%2FtechTube%2F2019%2F07%2F20%2FCountDownLatch%2F</url>
    <content type="text"><![CDATA[待添加]]></content>
      <categories>
        <category>Java杂谈</category>
      </categories>
      <tags>
        <tag>CountDownLatch</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Cloud]]></title>
    <url>%2FtechTube%2F2019%2F07%2F19%2FSpring-Cloud%2F</url>
    <content type="text"><![CDATA[待添加 待添加]]></content>
      <categories>
        <category>Spring框架</category>
      </categories>
      <tags>
        <tag>框架</tag>
        <tag>Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot]]></title>
    <url>%2FtechTube%2F2019%2F07%2F19%2FSpring-Boot%2F</url>
    <content type="text"><![CDATA[待添加]]></content>
      <categories>
        <category>Spring框架</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线程池]]></title>
    <url>%2FtechTube%2F2019%2F07%2F19%2F%E7%BA%BF%E7%A8%8B%E6%B1%A0%2F</url>
    <content type="text"><![CDATA[ThreadPoolExecutorgraph LR; RUNNING--"shutdown()"-->SHUTDOWN; RUNNING--"shutdownNow()"-->STOP; SHUTDOWN--"阻塞队列为空，线程池中的工作数量为0"-->TIDYING; STOP--线程池中的工作线程数量为0-->TIDYING; TIDYING--"terminated()"-->TERMINATED; 监控线程池 getTaskCount(): 线程池已执行和未执行的任务总数 getCompletedTaskCount(): 已完成的任务数量 getPoolSize(): 线程池当前的线程数量 getActiveCount(): 当前线程池中正在执行任务的线程总数 线程池的合理配置 cpu密集型任务，就需要尽量压榨CPU，参考值可以设置为NCPU+1IO密集型任务，参考值可以设置为2*NCPU 这只是参考值，并不代表随时随地拿线程池来用，要根据实际场景来分析选择以及参数的配置。例如，在开发企业级权限系统中，部门数的生成过程尝试使用线程池，结果是反而变慢，因为线程池里面的任务都很小（小到任务生成的时间和调度管理时间都很接近），这就造成资源浪费了。 关于用到newCachedThreadPool线程池可能会遇到的问题newCachedThreadPool的源码 12345public static ExecutorService newCachedThreadPool() &#123; return new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, new SynchronousQueue&lt;Runnable&gt;());&#125; 可以看到它允许的线程数为Integer.MAX_VALUE，这代表可以无限大，因为线程数可以这么多，所以会可能导致OOM问题，要解决这个问题，根本上要自己定义个方法，给线程数设置一个合理的上限，例如： 1return new ThreadPoolExecutor(0,1024，60L, TimeUnit.SECONDS, new SynchronousQueue&lt;Runnable&gt;());]]></content>
      <categories>
        <category>Java杂谈</category>
      </categories>
      <tags>
        <tag>线程池</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring]]></title>
    <url>%2FtechTube%2F2019%2F07%2F19%2FSpring%2F</url>
    <content type="text"><![CDATA[Spring源码分析blablabla]]></content>
      <categories>
        <category>Spring框架</category>
      </categories>
      <tags>
        <tag>框架</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[朝花夕拾]]></title>
    <url>%2FtechTube%2F2019%2F07%2F19%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
