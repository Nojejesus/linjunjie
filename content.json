{"meta":{"title":"Talk is cheap, show you my code.","subtitle":"千里之行，始于足下","description":"苟利国家生死以，岂因祸福避趋之","author":"Junjie Lin","url":"https://nojejesus.github.io/techTube","root":"/techTube/"},"pages":[{},{},{}],"posts":[{"title":"CountDownLatch","date":"2019-07-20T03:59:55.000Z","path":"2019/07/20/CountDownLatch/","text":"待添加","raw":"---\ntitle: CountDownLatch\ndate: 2019-07-20 11:59:55\ntags:\n- CountDownLatch\n- 并发\ncategories: \n- Java中级\n---\n\n##### 待添加","content":"<h5 id=\"待添加\"><a href=\"#待添加\" class=\"headerlink\" title=\"待添加\"></a>待添加</h5>","slug":"CountDownLatch","updated":"2019-07-20T04:02:01.890Z","comments":true,"link":"","permalink":"https://nojejesus.github.io/techTube/2019/07/20/CountDownLatch/","excerpt":"","categories":[{"name":"Java中级","slug":"Java中级","permalink":"https://nojejesus.github.io/techTube/categories/Java中级/"}],"tags":[{"name":"CountDownLatch","slug":"CountDownLatch","permalink":"https://nojejesus.github.io/techTube/tags/CountDownLatch/"},{"name":"并发","slug":"并发","permalink":"https://nojejesus.github.io/techTube/tags/并发/"}]},{"title":"Spring Cloud","date":"2019-07-19T15:17:40.000Z","path":"2019/07/19/Spring-Cloud/","text":"待添加 待添加","raw":"---\ntitle: Spring Cloud\ndate: 2019-07-19 23:17:40\ntags: #标签\n- Spring Cloud\n- 框架\ncategories: #分类\n- Spring框架\n---\n\n### 待添加\n\n<div align=\"center\">\n    <img src=\"https://raw.githubusercontent.com/Nojejesus/techTube/master/images/lakers1.jpg\" />\n</div>\n\n<!-- more -->\n\n-------------------------------------------------------------------\n\n### 待添加\n\n<div align=\"center\">\n    <img src=\"https://raw.githubusercontent.com/Nojejesus/techTube/master/images/rocket1.jpg\" />\n</div>\n\n","content":"<h3 id=\"待添加\"><a href=\"#待添加\" class=\"headerlink\" title=\"待添加\"></a>待添加</h3><div align=\"center\">\n    <img src=\"https://raw.githubusercontent.com/Nojejesus/techTube/master/images/lakers1.jpg\">\n</div>\n\n<a id=\"more\"></a>\n\n<hr>\n<h3 id=\"待添加-1\"><a href=\"#待添加-1\" class=\"headerlink\" title=\"待添加\"></a>待添加</h3><div align=\"center\">\n    <img src=\"https://raw.githubusercontent.com/Nojejesus/techTube/master/images/rocket1.jpg\">\n</div>\n\n","slug":"Spring-Cloud","updated":"2019-07-20T01:06:40.644Z","comments":true,"link":"","permalink":"https://nojejesus.github.io/techTube/2019/07/19/Spring-Cloud/","excerpt":"待添加","categories":[{"name":"Spring框架","slug":"Spring框架","permalink":"https://nojejesus.github.io/techTube/categories/Spring框架/"}],"tags":[{"name":"框架","slug":"框架","permalink":"https://nojejesus.github.io/techTube/tags/框架/"},{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"https://nojejesus.github.io/techTube/tags/Spring-Cloud/"}]},{"title":"Spring Boot","date":"2019-07-19T11:10:28.000Z","path":"2019/07/19/Spring-Boot/","text":"待添加","raw":"---\ntitle: Spring Boot\ndate: 2019-07-19 19:10:28\ntags: #标签\n- Spring Boot\n- 框架\ncategories: #分类\n- Spring框架\n---\n\n##### 待添加\n\n<!-- more -->\n\n","content":"<h5 id=\"待添加\"><a href=\"#待添加\" class=\"headerlink\" title=\"待添加\"></a>待添加</h5><a id=\"more\"></a>\n\n","slug":"Spring-Boot","updated":"2019-07-20T02:01:46.632Z","comments":true,"link":"","permalink":"https://nojejesus.github.io/techTube/2019/07/19/Spring-Boot/","excerpt":"待添加","categories":[{"name":"Spring框架","slug":"Spring框架","permalink":"https://nojejesus.github.io/techTube/categories/Spring框架/"}],"tags":[{"name":"Spring Boot","slug":"Spring-Boot","permalink":"https://nojejesus.github.io/techTube/tags/Spring-Boot/"},{"name":"框架","slug":"框架","permalink":"https://nojejesus.github.io/techTube/tags/框架/"}]},{"title":"线程池","date":"2019-07-19T07:31:49.000Z","path":"2019/07/19/线程池/","text":"ThreadPoolExecutorgraph LR; RUNNING--\"shutdown()\"-->SHUTDOWN; RUNNING--\"shutdownNow()\"-->STOP; SHUTDOWN--\"阻塞队列为空，线程池中的工作数量为0\"-->TIDYING; STOP--线程池中的工作线程数量为0-->TIDYING; TIDYING--\"terminated()\"-->TERMINATED; 监控线程池 getTaskCount(): 线程池已执行和未执行的任务总数 getCompletedTaskCount(): 已完成的任务数量 getPoolSize(): 线程池当前的线程数量 getActiveCount(): 当前线程池中正在执行任务的线程总数 线程池的合理配置 cpu密集型任务，就需要尽量压榨CPU，参考值可以设置为NCPU+1IO密集型任务，参考值可以设置为2*NCPU 这只是参考值，并不代表随时随地拿线程池来用，要根据实际场景来分析选择以及参数的配置。例如，在开发企业级权限系统中，部门数的生成过程尝试使用线程池，结果是反而变慢，因为线程池里面的任务都很小（小到任务生成的时间和调度管理时间都很接近），这就造成资源浪费了。 关于用到newCachedThreadPool线程池可能会遇到的问题newCachedThreadPool的源码 12345public static ExecutorService newCachedThreadPool() &#123; return new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, new SynchronousQueue&lt;Runnable&gt;());&#125; 可以看到它允许的线程数为Integer.MAX_VALUE，这代表可以无限大，因为线程数可以这么多，所以会可能导致OOM问题，要解决这个问题，根本上要自己定义个方法，给线程数设置一个合理的上限，例如： 1return new ThreadPoolExecutor(0,1024，60L, TimeUnit.SECONDS, new SynchronousQueue&lt;Runnable&gt;());","raw":"---\ntitle: 线程池\ndate: 2019-07-19 15:31:49\ntags: #标签\n- 线程池\ncategories: #分类\n- Java中级\n---\n### ThreadPoolExecutor\n\n```mermaid\ngraph LR;\n    RUNNING--\"shutdown()\"-->SHUTDOWN;\n    RUNNING--\"shutdownNow()\"-->STOP;\n    SHUTDOWN--\"阻塞队列为空，线程池中的工作数量为0\"-->TIDYING;\n    STOP--线程池中的工作线程数量为0-->TIDYING;\n    TIDYING--\"terminated()\"-->TERMINATED;\n```\n\n+ 监控线程池\n- getTaskCount(): 线程池已执行和未执行的任务总数\n- getCompletedTaskCount(): 已完成的任务数量\n- getPoolSize(): 线程池当前的线程数量\n- getActiveCount(): 当前线程池中正在执行任务的线程总数\n\n<!-- more -->\n\n##### 线程池的合理配置\n>>cpu密集型任务，就需要尽量压榨CPU，参考值可以设置为NCPU+1\n>>IO密集型任务，参考值可以设置为2*NCPU\n\n>>这只是参考值，并不代表随时随地拿线程池来用，要根据实际场景来分析选择以及参数的配置。例如，在开发企业级权限系统中，部门数的生成过程尝试使用线程池，结果是反而变慢，因为线程池里面的任务都很小（小到任务生成的时间和调度管理时间都很接近），这就造成资源浪费了。\n\n##### 关于用到newCachedThreadPool线程池可能会遇到的问题\n\nnewCachedThreadPool的源码\n```java\npublic static ExecutorService newCachedThreadPool() {\n   return new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n                                 60L, TimeUnit.SECONDS,\n                                 new SynchronousQueue<Runnable>());\n}\n```\n可以看到它允许的线程数为Integer.MAX_VALUE，这代表可以无限大，因为线程数可以这么多，所以会可能导致OOM问题，要解决这个问题，根本上要自己定义个方法，给线程数设置一个合理的上限，例如：\n```java\nreturn new ThreadPoolExecutor(0,1024，60L, TimeUnit.SECONDS, new SynchronousQueue<Runnable>());\n```\n\n","content":"<h3 id=\"ThreadPoolExecutor\"><a href=\"#ThreadPoolExecutor\" class=\"headerlink\" title=\"ThreadPoolExecutor\"></a>ThreadPoolExecutor</h3><pre class=\"mermaid\">graph LR;\n    RUNNING--\"shutdown()\"-->SHUTDOWN;\n    RUNNING--\"shutdownNow()\"-->STOP;\n    SHUTDOWN--\"阻塞队列为空，线程池中的工作数量为0\"-->TIDYING;\n    STOP--线程池中的工作线程数量为0-->TIDYING;\n    TIDYING--\"terminated()\"-->TERMINATED;</pre>\n\n<ul>\n<li>监控线程池</li>\n</ul>\n<ul>\n<li>getTaskCount(): 线程池已执行和未执行的任务总数</li>\n<li>getCompletedTaskCount(): 已完成的任务数量</li>\n<li>getPoolSize(): 线程池当前的线程数量</li>\n<li>getActiveCount(): 当前线程池中正在执行任务的线程总数</li>\n</ul>\n<a id=\"more\"></a>\n\n<h5 id=\"线程池的合理配置\"><a href=\"#线程池的合理配置\" class=\"headerlink\" title=\"线程池的合理配置\"></a>线程池的合理配置</h5><blockquote>\n<blockquote>\n<p>cpu密集型任务，就需要尽量压榨CPU，参考值可以设置为NCPU+1<br>IO密集型任务，参考值可以设置为2*NCPU</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>这只是参考值，并不代表随时随地拿线程池来用，要根据实际场景来分析选择以及参数的配置。例如，在开发企业级权限系统中，部门数的生成过程尝试使用线程池，结果是反而变慢，因为线程池里面的任务都很小（小到任务生成的时间和调度管理时间都很接近），这就造成资源浪费了。</p>\n</blockquote>\n</blockquote>\n<h5 id=\"关于用到newCachedThreadPool线程池可能会遇到的问题\"><a href=\"#关于用到newCachedThreadPool线程池可能会遇到的问题\" class=\"headerlink\" title=\"关于用到newCachedThreadPool线程池可能会遇到的问题\"></a>关于用到newCachedThreadPool线程池可能会遇到的问题</h5><p>newCachedThreadPool的源码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newCachedThreadPool</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">0</span>, Integer.MAX_VALUE,</span><br><span class=\"line\">                                 <span class=\"number\">60L</span>, TimeUnit.SECONDS,</span><br><span class=\"line\">                                 <span class=\"keyword\">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到它允许的线程数为Integer.MAX_VALUE，这代表可以无限大，因为线程数可以这么多，所以会可能导致OOM问题，要解决这个问题，根本上要自己定义个方法，给线程数设置一个合理的上限，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">0</span>,<span class=\"number\">1024</span>，<span class=\"number\">60L</span>, TimeUnit.SECONDS, <span class=\"keyword\">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br></pre></td></tr></table></figure>\n\n","slug":"线程池","updated":"2019-07-20T04:02:07.050Z","comments":true,"link":"","permalink":"https://nojejesus.github.io/techTube/2019/07/19/线程池/","excerpt":"ThreadPoolExecutorgraph LR; RUNNING--\"shutdown()\"-->SHUTDOWN; RUNNING--\"shutdownNow()\"-->STOP; SHUTDOWN--\"阻塞队列为空，线程池中的工作数量为0\"-->TIDYING; STOP--线程池中的工作线程数量为0-->TIDYING; TIDYING--\"terminated()\"-->TERMINATED; 监控线程池 getTaskCount(): 线程池已执行和未执行的任务总数 getCompletedTaskCount(): 已完成的任务数量 getPoolSize(): 线程池当前的线程数量 getActiveCount(): 当前线程池中正在执行任务的线程总数","categories":[{"name":"Java中级","slug":"Java中级","permalink":"https://nojejesus.github.io/techTube/categories/Java中级/"}],"tags":[{"name":"线程池","slug":"线程池","permalink":"https://nojejesus.github.io/techTube/tags/线程池/"}]},{"title":"Spring","date":"2019-07-19T05:10:53.000Z","path":"2019/07/19/Spring/","text":"Spring源码分析blablabla","raw":"---\nlayout: _posts\ntitle: Spring\ndate: 2019-07-19 13:10:53\ntags: #标签\n- Spring\n- 框架\ncategories: #分类\n- Spring框架\n---\n##### Spring源码分析\n\n##### blablabla\n\n<!-- more -->","content":"<h5 id=\"Spring源码分析\"><a href=\"#Spring源码分析\" class=\"headerlink\" title=\"Spring源码分析\"></a>Spring源码分析</h5><h5 id=\"blablabla\"><a href=\"#blablabla\" class=\"headerlink\" title=\"blablabla\"></a>blablabla</h5><a id=\"more\"></a>","slug":"Spring","updated":"2019-07-20T02:01:22.882Z","comments":true,"link":"","permalink":"https://nojejesus.github.io/techTube/2019/07/19/Spring/","excerpt":"Spring源码分析blablabla","categories":[{"name":"Spring框架","slug":"Spring框架","permalink":"https://nojejesus.github.io/techTube/categories/Spring框架/"}],"tags":[{"name":"框架","slug":"框架","permalink":"https://nojejesus.github.io/techTube/tags/框架/"},{"name":"Spring","slug":"Spring","permalink":"https://nojejesus.github.io/techTube/tags/Spring/"}]},{"title":"朝花夕拾","date":"2019-07-19T01:03:37.705Z","path":"2019/07/19/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","raw":"---\ntitle: 朝花夕拾\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<a id=\"more\"></a>\n\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","slug":"hello-world","updated":"2019-07-19T20:03:29.006Z","comments":true,"link":"","permalink":"https://nojejesus.github.io/techTube/2019/07/19/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","categories":[],"tags":[]}]}